package main

import (
	"context"
	"log"
	"net/http"
	"sync"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"github.com/no-yan/knowledge-work-connect-todo/gen/todo/v1/todov1connect" // generated by protoc-gen-connect-go

	todov1 "github.com/no-yan/knowledge-work-connect-todo/gen/todo/v1" // generated by protoc-gen-go
)

var m = sync.Map{}

type TodoServer struct{}

type Todo struct {
	Id     string
	Title  string
	Status bool
}

func (s *TodoServer) Add(
	ctx context.Context,
	req *connect.Request[todov1.AddRequest],
) (*connect.Response[todov1.AddResponse], error) {
	log.Println("Request headers: ", req.Header())

	m.Store("1", Todo{
		Title: req.Body().GetTitle(),
		Status: false
	})

	res := connect.NewResponse(&todov1.AddResponse{
		Id:     "1",
		Status: false,
	})
	res.Header().Set("Todo-Version", "v1")
	return res, nil
}

func (s *TodoServer) Delete(
	ctx context.Context,
	req *connect.Request[todov1.DeleteRequest],
) (*connect.Response[todov1.DeleteResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&todov1.DeleteResponse{
		Id: "1",
	})
	res.Header().Set("Todo-Version", "v1")
	return res, nil
}

func (s *TodoServer) Update(
	ctx context.Context,
	req *connect.Request[todov1.UpdateRequest],
) (*connect.Response[todov1.UpdateResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&todov1.UpdateResponse{
		Id:     "1",
		Status: false,
	})
	res.Header().Set("Todo-Version", "v1")
	return res, nil
}

func main() {
	m.Store("Key 1", "Value 1")
	m.Store("Key 2", "Value 2")
	m.Store("Key 3", "Value 3")
	m.Store("Key 4", "Value 4")
	m.Store("Key 5", "Value 5")

	todoer := &TodoServer{}
	mux := http.NewServeMux()

	path, handler := todov1connect.NewTodoServiceHandler(todoer)
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
